/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GovernanceInterface extends ethers.utils.Interface {
  functions: {
    "createProposal(string)": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "getProposalCount()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposalState(uint256)": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "quorumVotes()": FunctionFragment;
    "vote(uint256,uint256,bool)": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(uint256,string)": EventFragment;
    "Voted(uint256,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, string] & { proposalId: BigNumber; name: string }
>;

export type VotedEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean] & {
    proposalId: BigNumber;
    voter: string;
    amount: BigNumber;
    support: boolean;
  }
>;

export class Governance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GovernanceInterface;

  functions: {
    createProposal(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        name: string;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        state: number;
      }
    >;

    getProposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalState(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        name: string;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
      }
    >;

    quorumVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      proposalId: BigNumberish,
      amount: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  createProposal(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProposal(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      id: BigNumber;
      name: string;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      state: number;
    }
  >;

  getProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  proposalState(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      name: string;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
    }
  >;

  quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    proposalId: BigNumberish,
    amount: BigNumberish,
    support: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createProposal(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        name: string;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        state: number;
      }
    >;

    getProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposalState(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        name: string;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
      }
    >;

    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      proposalId: BigNumberish,
      amount: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ProposalCreated(uint256,string)"(
      proposalId?: BigNumberish | null,
      name?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; name: string }
    >;

    ProposalCreated(
      proposalId?: BigNumberish | null,
      name?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; name: string }
    >;

    "Voted(uint256,address,uint256,bool)"(
      proposalId?: BigNumberish | null,
      voter?: string | null,
      amount?: null,
      support?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, boolean],
      {
        proposalId: BigNumber;
        voter: string;
        amount: BigNumber;
        support: boolean;
      }
    >;

    Voted(
      proposalId?: BigNumberish | null,
      voter?: string | null,
      amount?: null,
      support?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, boolean],
      {
        proposalId: BigNumber;
        voter: string;
        amount: BigNumber;
        support: boolean;
      }
    >;
  };

  estimateGas: {
    createProposal(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposalState(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      proposalId: BigNumberish,
      amount: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createProposal(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalState(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      proposalId: BigNumberish,
      amount: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
